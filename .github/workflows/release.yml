# this_file: .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Extract version from tag
      id: extract_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Validate version format
      run: |
        if ! echo "${{ steps.extract_version.outputs.VERSION }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
          echo "Invalid version format: ${{ steps.extract_version.outputs.VERSION }}"
          exit 1
        fi
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git history
        CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD | grep -v "^- Merge" | head -20)
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract_version.outputs.TAG_NAME }}
        release_name: Release ${{ steps.extract_version.outputs.TAG_NAME }}
        body: |
          ## Changes in ${{ steps.extract_version.outputs.TAG_NAME }}
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          ### Pre-built binaries
          Download the appropriate binary for your platform from the assets below.
          
          ### Using Cargo
          ```bash
          cargo install fontgrepc
          ```
          
          ### From source
          ```bash
          git clone https://github.com/twardoch/fontgrepc.git
          cd fontgrepc
          git checkout ${{ steps.extract_version.outputs.TAG_NAME }}
          cargo build --release
          ```
        draft: false
        prerelease: ${{ contains(steps.extract_version.outputs.VERSION, '-') }}

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: fontgrepc-linux-x86_64
            asset_name: fontgrepc-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: fontgrepc-linux-x86_64-musl
            asset_name: fontgrepc-linux-x86_64-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: fontgrepc-linux-aarch64
            asset_name: fontgrepc-linux-aarch64
          
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: fontgrepc-macos-x86_64
            asset_name: fontgrepc-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: fontgrepc-macos-aarch64
            asset_name: fontgrepc-macos-aarch64
          
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: fontgrepc-windows-x86_64.exe
            asset_name: fontgrepc-windows-x86_64.exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
    
    - name: Install cross (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
      run: |
        cargo install cross
    
    - name: Install target-specific tools (Linux aarch64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Install target-specific tools (Linux musl)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
    
    - name: Build binary
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.target }}" != "x86_64-unknown-linux-gnu" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
      shell: bash
    
    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
          strip target/${{ matrix.target }}/release/fontgrepc
        elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          aarch64-linux-gnu-strip target/${{ matrix.target }}/release/fontgrepc
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          strip target/${{ matrix.target }}/release/fontgrepc
        else
          strip target/${{ matrix.target }}/release/fontgrepc
        fi
      shell: bash
    
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.artifact_name }}.tar.gz fontgrepc
        cd ../../..
        echo "ASSET_PATH=${{ matrix.artifact_name }}.tar.gz" >> $GITHUB_ENV
        echo "ASSET_CONTENT_TYPE=application/gzip" >> $GITHUB_ENV
    
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.artifact_name }}.zip fontgrepc.exe
        cd ../../..
        echo "ASSET_PATH=${{ matrix.artifact_name }}.zip" >> $GITHUB_ENV
        echo "ASSET_CONTENT_TYPE=application/zip" >> $GITHUB_ENV
      shell: bash
    
    - name: Generate checksums
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          certutil -hashfile "${{ env.ASSET_PATH }}" SHA256 > "${{ env.ASSET_PATH }}.sha256"
        else
          shasum -a 256 "${{ env.ASSET_PATH }}" > "${{ env.ASSET_PATH }}.sha256"
        fi
      shell: bash
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET_PATH }}
        asset_name: ${{ env.ASSET_PATH }}
        asset_content_type: ${{ env.ASSET_CONTENT_TYPE }}
    
    - name: Upload Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET_PATH }}.sha256
        asset_name: ${{ env.ASSET_PATH }}.sha256
        asset_content_type: text/plain

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Extract version from tag
      id: extract_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Verify version in Cargo.toml
      run: |
        CARGO_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
        if [ "$CARGO_VERSION" != "${{ steps.extract_version.outputs.VERSION }}" ]; then
          echo "Version mismatch: Cargo.toml has $CARGO_VERSION, tag has ${{ steps.extract_version.outputs.VERSION }}"
          exit 1
        fi
    
    - name: Run tests
      run: cargo test --all-features
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
      env:
        CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref, '-') }} # Only for stable releases
    steps:
    - name: Extract version from tag
      id: extract_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate Homebrew formula
      run: |
        cat > fontgrepc.rb << 'EOF'
        class Fontgrepc < Formula
          desc "Cache-based command-line tool for fast finding of font files"
          homepage "https://github.com/twardoch/fontgrepc"
          url "https://github.com/twardoch/fontgrepc/archive/refs/tags/${{ steps.extract_version.outputs.TAG_NAME }}.tar.gz"
          version "${{ steps.extract_version.outputs.VERSION }}"
          license "MIT"
          
          depends_on "rust" => :build
          
          def install
            system "cargo", "install", *std_cargo_args
          end
          
          test do
            system "#{bin}/fontgrepc", "--version"
          end
        end
        EOF
    
    - name: Upload Homebrew formula
      uses: actions/upload-artifact@v4
      with:
        name: homebrew-formula
        path: fontgrepc.rb